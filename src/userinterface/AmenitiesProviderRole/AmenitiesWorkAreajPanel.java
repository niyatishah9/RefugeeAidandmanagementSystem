/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.AmenitiesProviderRole;

import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.Homeless;
import Business.Network.Network;
import Business.Organization.AmenitiesOrganization;
import Business.Organization.InventoryOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AmenitiesWorkRequest;
import Business.WorkQueue.InventoryWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.LoginJPanel;

/**
 *
 * @author niyati
 */
public class AmenitiesWorkAreajPanel extends javax.swing.JPanel {

    /**
     * Creates new form AmenitiesWorkAreajPanel
     */
    
    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private AmenitiesOrganization amenitiesOrganization;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    
    
    public AmenitiesWorkAreajPanel(JPanel userProcessContainer, UserAccount account, Organization organization, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.amenitiesOrganization = (AmenitiesOrganization)organization;
        populateamenetiesTable();
    }

    
   
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        assignhere = new javax.swing.JButton();
        processbtn = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        RequestInventoryBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        logoutJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        amenetiestable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(null);

        assignhere.setBackground(new java.awt.Color(255, 255, 255));
        assignhere.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        assignhere.setText("Assign Here");
        assignhere.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignhereActionPerformed(evt);
            }
        });
        add(assignhere);
        assignhere.setBounds(685, 257, 183, 31);

        processbtn.setBackground(new java.awt.Color(255, 255, 255));
        processbtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        processbtn.setText("Process");
        processbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processbtnActionPerformed(evt);
            }
        });
        add(processbtn);
        processbtn.setBounds(685, 357, 183, 31);

        refreshJButton.setBackground(new java.awt.Color(255, 255, 255));
        refreshJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton);
        refreshJButton.setBounds(685, 207, 183, 31);

        RequestInventoryBtn.setBackground(new java.awt.Color(255, 255, 255));
        RequestInventoryBtn.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        RequestInventoryBtn.setText("Request Inventory");
        RequestInventoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RequestInventoryBtnActionPerformed(evt);
            }
        });
        add(RequestInventoryBtn);
        RequestInventoryBtn.setBounds(685, 306, 183, 33);

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Amenities Provider Details");
        add(jLabel2);
        jLabel2.setBounds(10, 116, 867, 29);

        logoutJButton.setBackground(new java.awt.Color(255, 0, 0));
        logoutJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        logoutJButton.setForeground(new java.awt.Color(255, 255, 255));
        logoutJButton.setText("Logout");
        logoutJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutJButtonActionPerformed(evt);
            }
        });
        add(logoutJButton);
        logoutJButton.setBounds(743, 18, 116, 31);

        amenetiestable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        amenetiestable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        amenetiestable.setGridColor(new java.awt.Color(204, 255, 204));
        jScrollPane1.setViewportView(amenetiestable);

        add(jScrollPane1);
        jScrollPane1.setBounds(22, 207, 645, 181);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/images/medicalcamp organizer (1).jpg"))); // NOI18N
        add(jLabel1);
        jLabel1.setBounds(1, 3, 890, 700);
    }// </editor-fold>//GEN-END:initComponents

    private void assignhereActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignhereActionPerformed

        int selectedRow = amenetiestable.getSelectedRow();

        if (selectedRow < 0){
            return;
        }

        WorkRequest request = (WorkRequest)amenetiestable.getValueAt(selectedRow, 0);
        if(request.getReceiver() == null){
            request.setReceiver(userAccount);
            request.setStatus("Pending");
            dB4OUtil.storeSystem(business);
            populateamenetiesTable();
        }
        else{
            JOptionPane.showMessageDialog(null, "Already Assigned");
            return;
        }
    }//GEN-LAST:event_assignhereActionPerformed

    private void processbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processbtnActionPerformed

        int selectedRow = amenetiestable.getSelectedRow();

        if (selectedRow < 0){
            return;
        }

        AmenitiesWorkRequest request = (AmenitiesWorkRequest)amenetiestable.getValueAt(selectedRow, 0);
        if(request.getIwr() != null){
            //            request.setStatus("Processing");
            ProcessNewAmeneties processJPanel = new  ProcessNewAmeneties(userProcessContainer, request,userAccount,business);
            userProcessContainer.add("processWorkRequestJPanel", processJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
        else{
            JOptionPane.showMessageDialog(null, "Cannot Process it Yet Please raise inventory request");
        }
    }//GEN-LAST:event_processbtnActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateamenetiesTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void RequestInventoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RequestInventoryBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = amenetiestable.getSelectedRow();

        if (selectedRow < 0){
            return;
        }

        AmenitiesWorkRequest relatedReq = (AmenitiesWorkRequest)amenetiestable.getValueAt(selectedRow, 0);

        if(!relatedReq.getStatus().equals("Requested Inventory")) {
            relatedReq.setStatus("Requested Inventory");
            String message = "need inventory";
            InventoryWorkRequest request = new InventoryWorkRequest();
            request.setMessage(message);
            request.setSender(userAccount);
            request.setStatus("Sent");
            request.setAwr(relatedReq);
            relatedReq.setIwr(request);

            Organization org = null;
            for(Network n : business.getNetworkList()){
                for(Enterprise e: n.getEnterpriseDirectory().getEnterpriseList()){
                    if(e instanceof Homeless){
                        for (Organization organization : e.getOrganizationDirectory().getOrganizationArrayList()){
                            if (organization instanceof InventoryOrganization){
                                org = organization;
                                break;
                            }
                        }
                    }
                }
            }

            if (org!=null){
                //          System.out.println(request);
                org.getWorkQueue().getWorkRequestList().add(request);
                userAccount.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "Inventory Request Created");
            }
            dB4OUtil.storeSystem(business);
            populateamenetiesTable();
        }
        else{
            JOptionPane.showMessageDialog(null, "Already raised a Inventory Request");
            return;
        }
    }//GEN-LAST:event_RequestInventoryBtnActionPerformed

    private void logoutJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutJButtonActionPerformed
        LoginJPanel loginJPanel=new LoginJPanel();
        userProcessContainer.add("loginJPanel",loginJPanel);
        CardLayout layout=(CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        dB4OUtil.storeSystem(business);
    }//GEN-LAST:event_logoutJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton RequestInventoryBtn;
    private javax.swing.JTable amenetiestable;
    private javax.swing.JButton assignhere;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logoutJButton;
    private javax.swing.JButton processbtn;
    private javax.swing.JButton refreshJButton;
    // End of variables declaration//GEN-END:variables
 public void populateamenetiesTable(){
        DefaultTableModel model = (DefaultTableModel)amenetiestable.getModel();

        model.setRowCount(0);

        for(WorkRequest request :  amenitiesOrganization.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getSender().getEmployee().getName();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[3] = request.getStatus();

            model.addRow(row);
        }

}
}
